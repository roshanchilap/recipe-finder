{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","dietLabels","className","style","recipe","map","ingredient","index","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iQAsBeA,EAnBA,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WACrD,OACE,sBAAKC,UAAWC,IAAMC,OAAtB,UACE,6BAAKP,IACL,6BACGG,EAAYK,KAAI,SAACC,EAAYC,GAAb,OACf,6BAAiBD,EAAWE,MAAnBD,QAGb,8BACE,0CACCT,KAEH,4BAAIG,IACJ,qBAAKC,UAAWC,IAAMJ,MAAOU,IAAKV,EAAOW,IAAI,SC+CpCC,G,MA7DH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,WANnB,mBAMTK,EANS,KAMFC,EANE,KAQhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAUMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAtBf,WAsBe,oBArBd,qCAoBG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAShB,OACE,sBAAKxB,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,2BACA,uBAAM2B,SAtBQ,SAACC,GACjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAmBmBd,UAAU,cAArC,UACE,uBACEA,UAAU,YACV8B,KAAK,OACLC,MAAOlB,EACPmB,SArBa,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,UAsBf,wBAAQ/B,UAAU,eAAe8B,KAAK,SAAtC,uBAIF,qBAAK9B,UAAU,UAAf,SACGW,EAAQR,KAAI,SAACD,GAAD,OACX,cAAC,EAAD,CAEEP,MAAOO,EAAOA,OAAOgC,MACrBtC,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAOJ,YAC3BC,WAAcG,EAAOA,OAAOH,YALvBG,EAAOA,OAAOgC,iBCvChBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.438c4781.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients, dietLabels }) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1>{title}</h1>\r\n      <ul>\r\n        {ingredients.map((ingredient, index) => (\r\n          <li key={index}>{ingredient.text}</li>\r\n        ))}\r\n      </ul>\r\n      <p>\r\n        <b>Calories:</b>\r\n        {calories}\r\n      </p>\r\n      <p>{dietLabels}</p>\r\n      <img className={style.image} src={image} alt=\"\"></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\nconst App = () => {\n  const APP_ID = \"d20f79e7\";\n  const APP_KEY = \"90036dbbc385a0cae11ddd3159184fa4\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-title\">Recipe Finder</h1>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"searchBar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        ></input>\n        <button className=\"searchButton\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            dietLabels = {recipe.recipe.dietLabels}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__YaLuH\",\"image\":\"recipe_image__2Q-nX\"};"],"sourceRoot":""}